// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`for loop variable cannot be reassigned in closure: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "for (let i = 0; i < 10; i = i + 1) {
  function f() {
    i = 10;
  }
}",
  "displayResult": Array [],
  "errors": Array [
    NoAssignmentToForVariable {
      "node": Node {
        "end": 64,
        "inferredType": Object {
          "kind": "primitive",
          "name": "number",
        },
        "left": Node {
          "end": 59,
          "inferredType": Object {
            "kind": "primitive",
            "name": "number",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 5,
              "line": 3,
            },
            "start": Position {
              "column": 4,
              "line": 3,
            },
          },
          "name": "i",
          "start": 58,
          "typability": "Typed",
          "type": "Identifier",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 10,
            "line": 3,
          },
          "start": Position {
            "column": 4,
            "line": 3,
          },
        },
        "operator": "=",
        "right": Node {
          "end": 64,
          "inferredType": Object {
            "kind": "primitive",
            "name": "number",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 10,
              "line": 3,
            },
            "start": Position {
              "column": 8,
              "line": 3,
            },
          },
          "raw": "10",
          "start": 62,
          "typability": "Typed",
          "type": "Literal",
          "value": 10,
        },
        "start": 58,
        "typability": "Typed",
        "type": "AssignmentExpression",
      },
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 3: Assignment to a for loop variable in the for loop is not allowed.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`for loop variable cannot be reassigned: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "for (let i = 0; i < 10; i = i + 1) {
  i = 10;
}",
  "displayResult": Array [],
  "errors": Array [
    NoAssignmentToForVariable {
      "node": Node {
        "end": 45,
        "inferredType": Object {
          "kind": "primitive",
          "name": "number",
        },
        "left": Node {
          "end": 40,
          "inferredType": Object {
            "kind": "primitive",
            "name": "number",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 3,
              "line": 2,
            },
            "start": Position {
              "column": 2,
              "line": 2,
            },
          },
          "name": "i",
          "start": 39,
          "typability": "Typed",
          "type": "Identifier",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 8,
            "line": 2,
          },
          "start": Position {
            "column": 2,
            "line": 2,
          },
        },
        "operator": "=",
        "right": Node {
          "end": 45,
          "inferredType": Object {
            "kind": "primitive",
            "name": "number",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 8,
              "line": 2,
            },
            "start": Position {
              "column": 6,
              "line": 2,
            },
          },
          "raw": "10",
          "start": 43,
          "typability": "Typed",
          "type": "Literal",
          "value": 10,
        },
        "start": 39,
        "typability": "Typed",
        "type": "AssignmentExpression",
      },
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 2: Assignment to a for loop variable in the for loop is not allowed.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`testing typability 1`] = `
Node {
  "body": Array [
    Node {
      "declarations": Array [
        Node {
          "end": 11,
          "id": Node {
            "end": 7,
            "loc": SourceLocation {
              "end": Position {
                "column": 7,
                "line": 1,
              },
              "start": Position {
                "column": 6,
                "line": 1,
              },
            },
            "name": "a",
            "start": 6,
            "type": "Identifier",
          },
          "init": Node {
            "end": 11,
            "loc": SourceLocation {
              "end": Position {
                "column": 11,
                "line": 1,
              },
              "start": Position {
                "column": 10,
                "line": 1,
              },
            },
            "raw": "1",
            "start": 10,
            "type": "Literal",
            "value": 1,
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 11,
              "line": 1,
            },
            "start": Position {
              "column": 6,
              "line": 1,
            },
          },
          "start": 6,
          "type": "VariableDeclarator",
        },
      ],
      "end": 12,
      "kind": "const",
      "loc": SourceLocation {
        "end": Position {
          "column": 12,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "typability": "NotYetTyped",
      "type": "VariableDeclaration",
    },
    Node {
      "body": Node {
        "body": Array [
          Node {
            "end": 53,
            "expression": Node {
              "end": 52,
              "loc": SourceLocation {
                "end": Position {
                  "column": 3,
                  "line": 3,
                },
                "start": Position {
                  "column": 2,
                  "line": 3,
                },
              },
              "name": "c",
              "start": 51,
              "type": "Identifier",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 4,
                "line": 3,
              },
              "start": Position {
                "column": 2,
                "line": 3,
              },
            },
            "start": 51,
            "type": "ExpressionStatement",
          },
          Node {
            "argument": Node {
              "arguments": Array [],
              "callee": Node {
                "end": 64,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 10,
                    "line": 4,
                  },
                  "start": Position {
                    "column": 9,
                    "line": 4,
                  },
                },
                "name": "f",
                "start": 63,
                "type": "Identifier",
              },
              "end": 66,
              "loc": SourceLocation {
                "end": Position {
                  "column": 12,
                  "line": 4,
                },
                "start": Position {
                  "column": 9,
                  "line": 4,
                },
              },
              "start": 63,
              "type": "CallExpression",
            },
            "end": 67,
            "loc": SourceLocation {
              "end": Position {
                "column": 13,
                "line": 4,
              },
              "start": Position {
                "column": 2,
                "line": 4,
              },
            },
            "start": 56,
            "type": "ReturnStatement",
          },
        ],
        "end": 69,
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 5,
          },
          "start": Position {
            "column": 13,
            "line": 2,
          },
        },
        "start": 37,
        "type": "BlockStatement",
      },
      "end": 69,
      "expression": false,
      "generator": false,
      "id": Node {
        "end": 34,
        "loc": SourceLocation {
          "end": Position {
            "column": 10,
            "line": 2,
          },
          "start": Position {
            "column": 9,
            "line": 2,
          },
        },
        "name": "f",
        "start": 33,
        "type": "Identifier",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 1,
          "line": 5,
        },
        "start": Position {
          "column": 0,
          "line": 2,
        },
      },
      "params": Array [],
      "start": 24,
      "typability": "NotYetTyped",
      "type": "FunctionDeclaration",
    },
    Node {
      "declarations": Array [
        Node {
          "end": 83,
          "id": Node {
            "end": 77,
            "loc": SourceLocation {
              "end": Position {
                "column": 7,
                "line": 6,
              },
              "start": Position {
                "column": 6,
                "line": 6,
              },
            },
            "name": "b",
            "start": 76,
            "type": "Identifier",
          },
          "init": Node {
            "arguments": Array [],
            "callee": Node {
              "end": 81,
              "loc": SourceLocation {
                "end": Position {
                  "column": 11,
                  "line": 6,
                },
                "start": Position {
                  "column": 10,
                  "line": 6,
                },
              },
              "name": "f",
              "start": 80,
              "type": "Identifier",
            },
            "end": 83,
            "loc": SourceLocation {
              "end": Position {
                "column": 13,
                "line": 6,
              },
              "start": Position {
                "column": 10,
                "line": 6,
              },
            },
            "start": 80,
            "type": "CallExpression",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 13,
              "line": 6,
            },
            "start": Position {
              "column": 6,
              "line": 6,
            },
          },
          "start": 76,
          "type": "VariableDeclarator",
        },
      ],
      "end": 84,
      "kind": "const",
      "loc": SourceLocation {
        "end": Position {
          "column": 14,
          "line": 6,
        },
        "start": Position {
          "column": 0,
          "line": 6,
        },
      },
      "start": 70,
      "typability": "NotYetTyped",
      "type": "VariableDeclaration",
    },
    Node {
      "body": Node {
        "body": Array [],
        "end": 126,
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 8,
          },
          "start": Position {
            "column": 13,
            "line": 7,
          },
        },
        "start": 109,
        "type": "BlockStatement",
      },
      "end": 126,
      "expression": false,
      "generator": false,
      "id": Node {
        "end": 106,
        "loc": SourceLocation {
          "end": Position {
            "column": 10,
            "line": 7,
          },
          "start": Position {
            "column": 9,
            "line": 7,
          },
        },
        "name": "g",
        "start": 105,
        "type": "Identifier",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 1,
          "line": 8,
        },
        "start": Position {
          "column": 0,
          "line": 7,
        },
      },
      "params": Array [],
      "start": 96,
      "typability": "Untypable",
      "type": "FunctionDeclaration",
    },
    Node {
      "declarations": Array [
        Node {
          "end": 138,
          "id": Node {
            "end": 134,
            "loc": SourceLocation {
              "end": Position {
                "column": 7,
                "line": 9,
              },
              "start": Position {
                "column": 6,
                "line": 9,
              },
            },
            "name": "c",
            "start": 133,
            "type": "Identifier",
          },
          "init": Node {
            "end": 138,
            "loc": SourceLocation {
              "end": Position {
                "column": 11,
                "line": 9,
              },
              "start": Position {
                "column": 10,
                "line": 9,
              },
            },
            "raw": "1",
            "start": 137,
            "type": "Literal",
            "value": 1,
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 11,
              "line": 9,
            },
            "start": Position {
              "column": 6,
              "line": 9,
            },
          },
          "start": 133,
          "type": "VariableDeclarator",
        },
      ],
      "end": 139,
      "kind": "const",
      "loc": SourceLocation {
        "end": Position {
          "column": 12,
          "line": 9,
        },
        "start": Position {
          "column": 0,
          "line": 9,
        },
      },
      "start": 127,
      "typability": "Untypable",
      "type": "VariableDeclaration",
    },
  ],
  "end": 154,
  "loc": SourceLocation {
    "end": Position {
      "column": 27,
      "line": 9,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;
